# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '26 3 * * 0'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: autobuild
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
                    - name: Quality Clouds Build Check for Servicenow
  # You may pin to the exact commit or the version.
  # uses: qualityclouds/action-application-scan@4d7fb9d7fb5f21c8379a6a55b36aff5a61b582a3
  uses: qualityclouds/action-application-scan@1.0.0
  with:
    # You need to provide a valid API key to connect the Quality Clouds ruleset against which your code will be checked
    token: 
    # The instance url
    instance_url: 
    # Use cloud mode to runh a Feature branch scan
    mode: # optional
    # Use cloud mode to runh a Feature branch scan
    api_url: # optional
                - name: Xanitizer Security Analysis
  # You may pin to the exact commit or the version.
  # uses: RIGS-IT/xanitizer-action@87d13138fb113b727cbe040c744a15a2b4fe5316
  uses: RIGS-IT/xanitizer-action@v1.0.1
  with:
    # String which is used as input for a Xanitizer license file. Note: It is recommended to use a GitHub secret to store the license file content like XANITIZER_LICENSE and access the content in the configuration via the GitHub secret parameter. Please see https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets for details. Note: If the license is a floating license and a proxy server is used to access the license server, please specify the proxy server settings. If no settings are specified, the settings from the Xanitizer properties file will be used.
    license: # optional
    # Number of attempts to get a license token from the license server. Note: If the used Xanitizer license is a machine bound license, this parameter will be ignored. If the used Xanitizer license is a floating license it may happen that all tokens are in use or the connection to the license server is not available at startup. In such cases, no license token can be requested successfully from the license server to start Xanitizer and the headless process would terminate with a license error. When this parameter is set to a value greater than zero, Xanitizer attempts every minute to request a license token until the specified count has been reached. Setting this parameter to zero disables the repetition.
    licenseServerRetryCount: # optional
    # Relative path under $GITHUB_WORKSPACE where the project was checked out. Note: Please use the same value as for parameter `path` of the configured actions/checkout action (see https://github.com/actions/checkout#usage parameter `path`).
    checkoutPath: # optional
    # The output location of the overview report. This has to be either a list of files or the parameter has to be undefined or empty if no overview reports should be written. Allowed file extensions are: pdf, html, docx.
    overviewReportOutputFile: # optional
    # Comma separated list of output locations of the overview reports. This has to be either a list of files or the parameter has to be undefined or empty if no overview reports should be written. Allowed file extensions are: pdf, html, docx.
    overviewReportOutputFiles: # optional
    # The output location of the findings list report. This has to be either a list of files or the parameter has to be undefined or empty if no findings list reports should be written. Allowed file extensions are: pdf, html, docx, xml, csv, sarif.
    findingsListReportOutputFile: # optional
    # Comma separated list of output locations of the findings list reports. This has to be either a list of files or the parameter has to be undefined or empty if no findings list reports should be written. Allowed file extensions are: pdf, html, docx, xml, csv, sarif. Note: If no report file has been secified, i.e., neither an overview report nor a findings list report, both a Xanitizer-Findings-List.pdf and a Xanitizer-Findings-List.sarif report will be generated in the checkout directory specified by $GITHUB_WORKSPACE with the optional relative parameter `checkoutPath` as default.
    findingsListReportOutputFiles: # optional
    # Boolean flag specifying if only findings with problem classifications are written to the findings list report.
    onlyProblemsInFindingsListReport: # optional, default is true
    # Boolean flag specifying if all the details of a finding are written to the findings list report, e.g. if the output contains all steps of a path. Note: Only relevant if the file extension of the parameter `findingsListReportOutputFile` is xml, html, or sarif.
    generateDetailsInFindingsListReport: # optional, default is true
    # The path to the Xanitizer configuration file of the project that should be analyzed. Either this parameter or the parameter `rootDirectory` may be specified, but not both. Note: If neither the parameter `configFile` nor the parameter `rootDirectory` has been specified, the parameter `rootDirectory` is set to the checkout directory specified by $GITHUB_WORKSPACE with the optional relative parameter `checkoutPath`.
    configFile: # optional
    # The root directory, to be used for default set-ups. Either this parameter or the parameter `configFile` may be specified, but not both. Note: If neither the parameter `configFile` nor the parameter `rootDirectory` has been specified, the parameter `rootDirectory` is set to the checkout directory specified by $GITHUB_WORKSPACE with the optional relative parameter `checkoutPath`.
    rootDirectory: # optional
    # The project name that should be used. Only relevant if the parameter `rootDirectory` is specified. If not given, the simple name of the root directory is used.
    projectName: # optional
    # The directory where to put the generated configuration file. Only relevant if the parameter `rootDirectory` is specified. If not given, the configuration file is generated in the `rootDirectory`.
    configFileDirectory: # optional
    # Boolean flag specifying if an existing config file is to be overwritten. Only relevant if the parameter `rootDirectory` is specified.
    overwriteConfigFile: # optional
    # Boolean flag specifying whether Xanitizer uses NodeJS to compile Angular and TypeScript projects to JavaScript code itself or not. This could be a potential risk if someone has manipulated the external ng or the tsc script. If the code is already compiled to JavaScript, best with a source map, this option can be set to `false` true - enables the compilation of Angular and TypeScript code to JavaScript by Xanitizer itself false - disables the compilation of Angular and TypeScript code to JavaScript by Xanitizer itself and some Xanitizer workspace information will be generated if Angular or Typescript files are found in the project not set - if this option is not set and Angular or Typescript files are found in the project, a Xanitizer workspace error will be generated 
    compileToJavaScript: # optional, default is true
    # Boolean flag specifying if npm audit should be executed. The npm audit APIs can be used to report on known vulnerable node.js libraries. This requires an Internet connection and so has to be allowed explicitly. This is only relevant for NodeJS projects.
    performNodeAudit: # optional, default is true
    # Boolean flag specifying whether the task should fail if there are search paths configured that do not exist.
    haltOnMissingSearchPaths: # optional
    # A comma - separated list of issue groups that will let the task fail if for any of them, a Xanitizer error issue occurs. Possible values are ALL_ERRORS, WORKSPACE_ERRORS, CALL_GRAPH_ERRORS, ANALYSIS_ERRORS, MIGRATION_ERRORS. If the value is not set, this means that issues are not relevant for the success of the task.
    haltOnIssues: # optional
    # Boolean flag specifying whether the task should fail if there are findings with a rating equal or higher than the value defined for `findingsRatingThreshold`.
    haltOnFindings: # optional
    # A rating value. Only used if the parameter `haltOnFindings` is set.
    findingsRatingThreshold: # optional
    # Boolean flag specifying whether the OWASP Dependency Check repository should be updated or not. Note: The OWASP Dependency Check is based on vulnerability data stored in a local repository. It is recommended to update the local OWASP Dependency Check repository on a regular basis via remote access to the National Vulnerability Database (NIST). If a proxy server is used to access the internet, please specify the proxy server settings otherwise the settings from the Xanitizer properties file will be used.
    updateOwaspDependencyCheckRepository: # optional
    # The logging level to be used when running Xanitizer. Values: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL.
    logLevel: # optional
    # Xanitizer`s project data directory, if it is not the default one in <HOME>/.Xanitizer.
    projectDataDirectory: # optional
    # Boolean flag specifying whether the task should fail if there are * NEW * findings with a rating equal or higher than the value defined for `newFindingsRating`.
    haltOnNewFindings: # optional
    # A rating value. Only used if the parameter `haltOnNewFindings` is set.
    newFindingsRatingThreshold: # optional
    # Optional path to the local Maven repository. Note: If no settings are specified, the settings from the Xanitizer properties file will be used.
    mavenRepository: # optional
    # Boolean flag specifying whether a snapshot should be created after parsing and analyzing the current version or not.
    createSnapshot: # optional
    # Optional comment added to the newly created snapshot. Only relevant if the parameter `createSnapshot` is true.
    snapshotComment: # optional
    # The output directory of the project export. Note: If the parameter is undefined or an empty string, the project is not exported.
    exportDirectory: # optional
    # Boolean flag specifying if snapshots should be exported or not. The parameter is only used if an export directory is set. If the parameter is not set or empty, no snapshots are exported.
    exportSnapshots: # optional
    # The passphrase for the project export. The parameter is only used if an export directory is set. If the parameter is not set or empty, the exported project is not encrypted. Note: It is recommended to use a GitHub secret to store the export like XANITIZER_EXPORT_PASSPHRASE and access the content in the configuration via the GitHub secret parameter. Please see https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets for details.
    exportPassphrase: # optional
    # The path to an exported Xanitizer project archive file. If specified, this project is merged into the current project. This means that all more recent user adaptations, findings and issues are migrated into the current project.
    mergedProject: # optional
    # The passphrase for the merged project. The parameter is only necessary if the parameter `mergedProject` is set and the merged project is encrypted. Note: It is recommended to use a GitHub secret to store the export passphrase like XANITIZER_EXPORT_PASSPHRASE. and access the content in the configuration via the GitHub secret parameter. Please see https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets for details.
    importPassphrase: # optional
    # Optional proxy server to access the internet to update the OWASP Dependency Check repository or to request a license token from the public license server in case of a floating license via a proxy. Note: If no settings are specified, the settings from the Xanitizer properties file will be used.
    proxyServer: # optional
    # Optional proxy server port.
    proxyPort: # optional
    # Optional proxy server user name.
    proxyUser: # optional
    # Optional proxy server user password.
    proxyPassword: # optional
                - name: Quality Clouds Build Check for Salesforce
  # You may pin to the exact commit or the version.
  # uses: qualityclouds/action-full-scan@4bc13bbfa27d8eaa0bc4978ac161d148a6f70ac4
  uses: qualityclouds/action-full-scan@1.0.1
  with:
    # You need to provide a valid API key to connect the Quality Clouds ruleset against which your code will be checked
    token: 
    # Use cloud mode to runh a Feature branch scan
    mode: # optional
    # The instance Id. Required when cloud mode is enabled.
    url_id: # optional
    # Use cloud mode to runh a Feature branch scan
    api_url: # optional
    # Customize runner version
    version: # optional
                - name: Red Hat Helm Chart Certifier
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/chart-verifier@783d6256b61ac542563eb11991b996707b53dbfb
  uses: redhat-actions/chart-verifier@v1
  with:
    # URI to Helm Chart to verify. This can be a path to the chart directory, or an http(s) URI.
    chart_uri: 
    # {all,annotations,digests,metadata,results}
    report_type: # default is results
    # Chart checks profile to run.
See https://github.com/redhat-certification/chart-verifier/tree/main/config for a list of profiles.

    profile_name: # optional
    # Version of profile_name to run. If profile_name is set but profile_version is not, the latest version is used.
    profile_version: # optional
    # Extra arguments to pass to the 'verify' command. See 'chart-verifier verify --help' for more info.

    verify_args: # optional
    # If true, exit with code 1 if at least one check is failed.
Else, always exit with code 0 - ie, never fail the workflow step.

    fail: # optional, default is true
                - name: validate-license-action
  # You may pin to the exact commit or the version.
  # uses: datreeio/validate-license-action@69e5b55debf4046461b0d21cced2f444937f863f
  uses: datreeio/validate-license-action@v1.0.0
              - name: Run Parasoft dotTEST
  # You may pin to the exact commit or the version.
  # uses: parasoft/run-dottest-action@13ba35dbd7b6fb8ac85621eb6bc4ef1a49c04b50
  uses: parasoft/run-dottest-action@2.0.1
  with:
    # Path to the working directory.
    workingDir: # optional, default is ${{ github.workspace }}
    # Path to the dotTEST installation directory, which contains dottestcli.exe. If not specified, dottestcli.exe will be searched for on PATH.
    installDir: # optional
    # Path to the solution to be analyzed. Specify a semicolon-separated list of paths to analyze many solutions. Supports ANT-style wildcards.
    solution: # optional, default is .\*.sln
    # Path to the project to be analyzed when no solution is provided. Specify a semicolon-separated list of paths to analyze many projects. Supports ANT-style wildcards.
    project: # optional
    # Full path to the website directory to be analyzed when no solution is provided.
    website: # optional
    # URL of the test configuration to be used for analysis.
    testConfig: # optional, default is builtin://Recommended .NET Core Rules
    # Solution-relative path to a project in a solution, a directory of files in a project, or a file. Use a semicolon-separated list to specify multiple paths.
    resource: # optional
    # File system paths to files to include in analysis. Supports ANT-style wildcards. If not specified, all files are analyzed. Use a semicolon-separated list to specify multiple paths.
    include: # optional
    # File system paths to files to exclude from analysis. Supports ANT-style wildcards. Use a semicolon-separated list to specify multiple paths.
    exclude: # optional
    # Path to the baseline report.xml file for Test Impact Analysis.
    referenceReportFile: # optional
    # Path to the baseline coverage.xml file for Test Impact Analysis.
    referenceCoverageFile: # optional
    # Path to additional assemblies required to resolve dependencies. Specify a semicolon-separated list of paths to provide many references. Supports ANT-style wildcards.
    reference: # optional
    # Path to the directory where the report will be created.
    reportDir: # optional, default is ${{ github.workspace }}/.dottest/report/${{ github.run_number }}
    # Publishes report to DTP.
    publish: # optional
    # Path to a settings file. Use a semicolon-separated list to specify multiple paths.
    settings: # optional
    # A single configuration setting in the "key=value" format. Use a semicolon-separated list to specify multiple paths.
    property: # optional
    # Disables the build of the tested solutions or projects.
    nobuild: # optional
    # Runs tests that are tagged with specific issue tracking types/IDs.
    testTagFilter: # optional
    # Solution configuration, e.g. "Debug".
    solutionConfig: # optional
    # Project configuration, e.g. "Debug".
    projectConfig: # optional
    # Target platform of the solution configuration (e.g."Any CPU") or project configuration (e.g. "AnyCPU").
    targetPlatform: # optional
    # Path to the location where console output is saved.
    out: # optional
    # Fails the command with exit code 2 or 4 if any findings are reported. It is recommended to use it with continue-on-error: true.
    fail: # optional
    # Lists all settings that are currently used.
    showsettings: # optional
    # 'Mode for GitHub report (SARIF) generation. You can use:
    # - "legacy" - for dotTEST 2020.2 or older
    # - "builtin" - for dotTEST 2021.1 or newer (default)
    sarifMode: # optional, default is builtin
                - name: SecureStack All-In-One GitHub Action
  # You may pin to the exact commit or the version.
  # uses: SecureStackCo/actions-all-in-one@96dc79a3c4081a8333040c6bf84b0c528ccb1eb9
  uses: SecureStackCo/actions-all-in-one@v0.1.2
  with:
    # SecureStack API key - generate an API key at https://app.securestack.com
    securestack_api_key: 
    # SecureStack Application ID - can be retrieved by accessing required application at https://app.securestack.com
    securestack_app_id: 
    # Severities lower than this value will be reported in the workflow console but will not cause an error for the action; value should be one of: critical | high | medium | low
    severity: 
                - name: Velocity deploy action
  # You may pin to the exact commit or the version.
  # uses: codeclimate/velocity-deploy-action@1b4a22f0db113bf8d85c14fd726cf0ec6d17cd13
  uses: codeclimate/velocity-deploy-action@v1.0.0
  with:
    # Your Velocity deployment token
    token: 
    # The version tag for the deploy (i.e. `b123`)
    version: # optional
    # The environment of the deploy (i.e. `production`)
    environment: # optional
                - name: Check vulnerable NuGet packages
  # You may pin to the exact commit or the version.
  # uses: elmahio/github-check-vulnerable-nuget-packages-action@29003e92dc014c9b90f78a6f3ee7e8811f9ded0f
  uses: elmahio/github-check-vulnerable-nuget-packages-action@v1
  with:
    # The project or solution file to operate on. If a file is not specified, the command will search current directory for one.
    project: # optional
                - name: DesigniteJava Incremental Code Quality Analysis
  # You may pin to the exact commit or the version.
  # uses: DesigniteTools/dj-incremental-analysis@add8f940ae3dbf8ac047bf73e47b11d0d146fc89
  uses: DesigniteTools/dj-incremental-analysis@v1.0.0
  with:
    # GitHub token created during workflow execution (Set to Read and Write)
    github-token: 
    # DesigniteJava analysis output folder name from previous commit
    designite-output-old: 
    # DesigniteJava analysis output folder name from current commit
    designite-output-new: 
    # Repository name
    repo-name: 
                - name: HashiCorp's Link Checker
  # You may pin to the exact commit or the version.
  # uses: hashicorp/gh-action-check-broken-links@9da9ec2d83f88fe981a856c3f03aca64e68af90c
  uses: hashicorp/gh-action-check-broken-links@v1
  with:
    # The base URL that links will be resolved against
    baseUrl: 
    # A list of files that will be scanned for the presence of links
    files: # optional
    # A newline delmited list of URLs that will be ignored
    whitelist: # optional
                - name: SecureStack Application Composition Analysis
  # You may pin to the exact commit or the version.
  # uses: SecureStackCo/actions-code@c2c35840882d041474c505c1045da157025cd57e
  uses: SecureStackCo/actions-code@v0.1.1
  with:
    # SecureStack API key - generate an API key at https://app.securestack.com
    securestack_api_key: 
    # SecureStack Application ID - can be retrieved by accessing required application at https://app.securestack.com
    securestack_app_id: 
    # Severities lower than this value will be reported in the workflow console but will not cause an error for the action; value should be one of: critical | high | medium | low
    severity: 
    # Severities lower than this value will be reported in the workflow console but will not cause an error for the action; value should be one of: critical | high | medium | low
    language: 
    # Optional flags for the bloodhound-cli code command - run bloodhound cli code --help for more details
    flags: # optional, default is 
                - name: SecureStack Secrets Analysis
  # You may pin to the exact commit or the version.
  # uses: SecureStackCo/actions-secrets@68f5dca939e2bf6b627449bd5c00f1bb423b01ca
  uses: SecureStackCo/actions-secrets@v0.1.3
  with:
    # SecureStack API key - generate one at https://app.securestack.com
    securestack_api_key: 
    # SecureStack Application ID - available when viewing applications at https://app.securestack.com
    securestack_app_id: 
    # Severities lower than this input value will not be reported; value should be one of: critical | high | medium | low
    severity: 
    # Optional flags for the bloodhound-cli secrets command - run bloodhound-cli code --help for more details.
    flags: # optional, default is 
                      - name: Test-PSModule (by PSModule)
  # You may pin to the exact commit or the version.
  # uses: PSModule/Test-PSModule@ccf086111eda24684e8d1af3ee8a3696c02dcf3b
  uses: PSModule/Test-PSModule@v1.0.2
  with:
    # The name of the module to test. The name of the repository is used if not specified.
    Name: # optional
    # The path to the module to test.
    Path: 
    # Run the module tests.
    RunModuleTests: # optional, default is true
                - name: filediff
  # You may pin to the exact commit or the version.
  # uses: Shopify/filediff@ada920c512dce7297703791084e5d9f2d65df418
  uses: Shopify/filediff@v0.0.4
  with:
    # The target branch to compare the diff against
    target_branch: 
    # A comma seperated list of globs to compare across branches
    dir_glob: 
    # Script to run before getting the file diff
    pre_diff_script: # optional
    # Do not render a collapsible section for the files
    file_details_open: # optional
    # Replaces previous filediff comments
    replace_comment: # optional, default is true
                - name: Coverity json-output-v7 Report
  # You may pin to the exact commit or the version.
  # uses: synopsys-sig/coverity-report-output-v7-json@149d0dd6b162cbf5a70ec8ef2bf495dd17f1b2b7
  uses: synopsys-sig/coverity-report-output-v7-json@v0.1.1
  with:
    # Your GitHub token
    github-token: 
    # The fully qualified path to your v7 Coverity JSON file, generated by the cov-format-errors command
    json-file-path: 
    # The URL of the Coverity Connect server to be referenced for REST API calls
    coverity-url: # optional
    # The name of this project within the Coverity Connect instance. This field is required to properly query issues from the server
    coverity-project-name: # optional
    # The username of the Coverity user whose account will access the Coverity Connect server. The user must have the "Access Web services" permission.
    coverity-username: # optional
    # The password associated with the Coverity username
    coverity-password: # optional
                - name: action-git-diff-suggestions
  # You may pin to the exact commit or the version.
  # uses: getsentry/action-git-diff-suggestions@8c75946d0d7bbe80a92cf3579d544321512c30b7
  uses: getsentry/action-git-diff-suggestions@v1
  with:
    # github token
    github-token: # optional
    # The message to prepend the review suggestion
    message: # optional
                - name: Montara CI
  # You may pin to the exact commit or the version.
  # uses: montara-io/montara-ci@c2da22ffe3d4703f1d0d5672c74a428db1c3c328
  uses: montara-io/montara-ci@v0.1.15
  with:
    # The URL of the webhook
    webhookUrl: 
    # Whether the test run is for staging or not
    isStaging: # optional
    # The number of retries to attempt
    numRetries: # optional, default is 60
                      - name: Run Parasoft SOAtest
  # You may pin to the exact commit or the version.
  # uses: parasoft/run-soatest-action@528ab5a8fcf8d0b3061a819006cecd4de8d2a167
  uses: parasoft/run-soatest-action@1.0.0
  with:
    # Installation folder of Parasoft SOAtest. If not specified, the soatestcli executable must be added to PATH.
    installDir: # optional
    # Path to the SOAtest workspace directory.
    soatestWorkspace: # optional, default is ${{ github.workspace }}
    # Test configuration to be used for test execution.
    testConfig: # optional, default is user://Example Configuration
    # Relative path(s) to the test suite(s) within the SOAtest workspace.
    resource: # optional, default is TestAssets
    # Setting file used to configure execution preferences.
    settings: # optional
    # The path to output folder or a file for the test execution report.
    report: # optional, default is reports
    # Format of reports from test execution.
    reportFormat: # optional, default is xml,html
    # Name of the SOAtest environment to use for executing the tests.
    environment: # optional
    # Enables the conversion of the SOAtest report into the xUnit format.
    convertReportToXUnit: # optional, default is true
    # Additional parameters for the soatestcli executable.
    additionalParams: # optional
                      - name: github-action-auto-format
  # You may pin to the exact commit or the version.
  # uses: cloudposse/github-action-auto-format@970af4c15a720047204400fe5b5ae52fb2991e9b
  uses: cloudposse/github-action-auto-format@v0.12.0
  with:
    # The path on the github-runner where the auto-format action scripts are checked out at runtime
    actions-files-checkout-path: # optional, default is github-action-auto-format
    # GitHub username for writing new commits
    bot-name: # optional, default is cloudpossebot
    # Email address associated with the GitHub user for writing new commits
    bot-email: # optional
    # Name of formatting task to execute. (Options include: readme, github, terraform, and context.)
    format-task: 
    # GitHub Token for use in `github_format.sh` and PR creation steps. This token must be granted `workflows` permissions.
    workflow-token: 
                      - name: CodeThreat Scanner
  # You may pin to the exact commit or the version.
  # uses: CodeThreat/codethreat-github-action@48fba2938431a6c9e36aa6e9ee96170043a6d18f
  uses: CodeThreat/codethreat-github-action@v1.023
  with:
    # FAILED_ARGS
    FAILED_ARGS: # optional, default is 
                      - name: slack-health-score
  # You may pin to the exact commit or the version.
  # uses: slackapi/slack-health-score@d58a419f15cdaff97e9aa7f09f95772830ab66f7
  uses: slackapi/slack-health-score@v0.1.1
  with:
    # File extension of files to filter on to report health score on. E.g. "js" or "go"
    extension: 
    # A GitHub access token with permissions to write GitHub Checks. Recommended to set this to `secrets.GITHUB_TOKEN` in combination with using in a workflow `job` that has `checks: write` permissions.
    github_token: 
    # Only parse the specified files and directories (recursively). Defaults to `.`. E.g. "src"
    include: # optional
    # Ignore the specified files and directories. Essentially a direct argument into `find` `-not -path "{arg}"`. Defaults to contents of `.gitignore`. E.g. "node_modules"
    exclude: # optional
    # A CodeCov API access token with read permissions to the repo. This _cannot_ be a CodeCov "Global Upload" token - it _must_ be a human user API access token. Setting this will try to pull coverage information for the repo from CodeCov to include in health score calculation; not setting it will exclude code coverage from health score calcuation.
    codecov_token: # optional
    # Maximum number of times to try retrieving code coverage information from codecov. Defaults to 10.
    codecov_max_attempts: # optional
    # Number of milliseconds to wait when retrying retrieving code coverage information from codecov. Defaults to 10000 (10 seconds).
    codecov_retry_delay: # optional
    # If retrieving code coverage from CodeCov times out (according to the configuration set up via the `codecov_max_attempts` and `codecov_retry_delay` inputs), should that cause this action to error out. Defaults to false.
    codecov_treat_timeout_as_error: # optional
                      - name: Rhysd actionlint
  # You may pin to the exact commit or the version.
  # uses: devops-actions/actionlint@e7ee33fbf5aa8c9f9ee1145137f3e52e25d6a35b
  uses: devops-actions/actionlint@v0.1.3
  with:
    # Fail the action if errors are found
    fail-on-errors: # optional, default is true
    # Custom SHELLCHECK_OPTS
    shellcheck_opts: # optional, default is 
                - name: paloaltonetworks/cov
  # You may pin to the exact commit or the version.
  # uses: PaloAltoNetworks/cov@a5c8c2cfd4bbfa59abe1f12eb10a6e455dea7b8a
  uses: PaloAltoNetworks/cov@3.1.0
  with:
    # The main branch name.
    main_branch: # default is main
    # Running mode. Either 'coverage', 'send-status' or 'both'.
    cov_mode: # default is coverage
    # The name of the coverage file to use.
    cov_file: # default is coverage.out
    # Default required coverage percentage.
    cov_threshold: # optional, default is 90
    # The version to use for cov.
    cov_version: # default is ${{github.action_ref}}
    # In mode 'send-status', pass the workflow id that generated the cov report.

    workflow_run_id: # optional
    # In mode 'send-status', pass the workflow head_sha.

    workflow_head_sha: # optional
                      - name: Rate My OpenAPI Action
  # You may pin to the exact commit or the version.
  # uses: zuplo/rmoa-action@636b14126760fa64e406190580a8b3bad3312c89
  uses: zuplo/rmoa-action@v1
  with:
    # Path to the OpenAPI spec that will be linted
    filepath: 
    # The API Key for RMOA API
    apikey: 
    # The maximum number of warnings allowed before labeling the run as failed.
    max-warnings: # optional
    # The maximum number of errors allowed before labeling the run as failed.
    max-errors: # optional
    # The minimum score (0 - 100) to label a lint run as successful/passing. Default is 80.
    minimum-score: # optional, default is 80
                      - name: Setup ReSharper Command Line Tools
  # You may pin to the exact commit or the version.
  # uses: goit/setup-resharper@2b537041effd120f0590b04ba5bf5d5188b68abb
  uses: goit/setup-resharper@v3.0.1
  with:
    # ReSharper CLT version to use. Example: 2019.3.4
    version: # optional
                      - name: DesigniteJava Action
  # You may pin to the exact commit or the version.
  # uses: DesigniteTools/DJAction@b52255133c5742a104cfad177775edb22bd4c92c
  uses: DesigniteTools/DJAction@v2.0
  with:
    # Personal access token
    PAT: # optional, default is No PAT provided
    # Designite license key - optional
    D_KEY: # optional, default is No key
                      - name: Run Parasoft C/C++test
  # You may pin to the exact commit or the version.
  # uses: parasoft/run-cpptest-action@b8d80cb3a54e92da530d4857477c18b9b55e707b
  uses: parasoft/run-cpptest-action@2.0.1
  with:
    # Installation folder of Parasoft C/C++test. If not specified, the cpptestcli executable must be added to $PATH.
    installDir: # optional
    # Working directory for running C/C++test.
    workingDir: # optional, default is ${{ github.workspace }}
    # Identifier of a compiler configuration. Ensure you specify the configuration that matches your compiler.
    compilerConfig: # optional, default is gcc_9-64
    # Test configuration to be used for code analysis.
    testConfig: # optional, default is builtin://Recommended Rules
    # Output folder for reports from code analysis.
    reportDir: # optional, default is reports
    # Format of reports from code analysis.
    reportFormat: # optional, default is xml,html,sarif
    # Input scope for analysis (typically, cpptestscan.bdf or compile_commands.json, depending on the project type and the build system).
    input: # optional, default is cpptestscan.bdf
    # Additional parameters for the cpptestcli executable.
    additionalParams: # optional, default is 
    # Command line pattern for running C/C++test.
    commandLinePattern: # optional, default is ${cpptestcli} -compiler "${compilerConfig}" -config "${testConfig}" -property report.format=${reportFormat} -report "${reportDir}" -module . -input "${input}" ${additionalParams}
                      - name: Codecov ATS
  # You may pin to the exact commit or the version.
  # uses: codecov/codecov-ats@d5a8e2d68e510a4ed2d0657bb9e9e8760a3f6ffc
  uses: codecov/codecov-ats@v0.3.0
  with:
    # Repository upload token - get it from codecov.io. Required
    token: # optional
    # Repository static token - get it from codecov.io. Required
    static_token: 
    # Change the upload host (Enterprise use only)
    enterprise_url: # optional
    # File pattern to search for. Defaults to "*"
    file_pattern: # optional
    # Avoid certain folders when uploading static analysis
    folders_to_exclude: # optional
    # Force upload of files during static analysis regardless if they are new
    force: # optional
    # Max time (in seconds) to wait for the label analysis. Default is to wait forever.
    label_max_wait_time: # optional
    # Override the assumed OS. Options are linux | macos | windows.
    os: # optional
    # Variable to save down tests string. Defaults to CODECOV_ATS_TESTS
    output_variable: # optional
    # Override the assumed base commit.
    override_base_commit: # optional
    # Branch to which this commit belongs to
    override_branch: # optional
    # Commit SHA (with 40 chars)
    override_commit: # optional
    # SHA (with 40 chars) of what should be the parent of this commit
    override_parent: # optional
    # Specify the pull request number mannually.
    override_pr: # optional
    # owner/repo slug used instead of the private repo token in Self-hosted
    override_slug: # optional
    # Folders not to search during static analysis
    static_folders_to_exclude: # optional
    # Folder to search during static analysis
    static_folder_to_search: # optional
    # Force running of static analysis
    static_force: # optional
    # Number of processes to use during static analysis
    static_number_processes: # optional
    # File pattern to search for during static analysis
    static_search_pattern: # optional
    # Specify whether the Codecov output should be verbose
    verbose: # optional
    # Specify which version of the Codecov CLI should be used. Defaults to `latest`
    version: # optional
          
